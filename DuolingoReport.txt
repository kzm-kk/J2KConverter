Duolingoは2年間にわたって、Javaで記述されたAndroidアプリの100パーセントKotlinへのマイグレーション作業を続けてきた。
このマイグレーションによるおもなメリットは、開発者の生産性と幸福度の向上に加えて、
Duolingoアプリがnullポインタ例外(NPE)からほぼ解放されることにある。
[]
100%の移行作業は、プロジェクトの規模に比例した量の時間が必要となるのは当然。
しかしながら、それでも2年かかったのはなぜ？
⇨開発の全ての時間を移行作業に費やすのは無理があり、アップデートとマイグレーションは同時進行だったのではないか(これはあくまでも個人の推測)
⇨当然その間はアップデート・修正の作業ペースは落ちる。

DuolingoがKotlinにしようと思った理由・期待したもの
１：生産性(productivity)
KotlinはJavaよりもはるかに冗長性が低く、書き込みと保守の両方をより速く簡単に行うことができます。
Javaとのシームレスな相互運用性と、新しい言語機能を追加するための保守的なアプローチにより、
Android開発者は簡単に理解できます。
[]
KotlinとJavaには共通の部分が多いので、移行先としては望ましい。
(Chaidarun氏のレポートでも
『大かつ唯一の成功要因は、選択した言語です。
KotlinのJavaとの親和性には、開発者が容易に学べたこと、
IDEAによるJavaからの自動変換が簡単であったこと、という2つの意味がありました。
JavaからScalaへの変換やObjective-CからSwiftへの変換では、こうは行かないでしょう。』
という風にある)
言語間の共通部分というのは、移行する上では最重要要素とも言えるくらいには大事なのかもしれない
書き方が全く違うコードの変換は実際問題めちゃくちゃ大変

２：安定(stability)
Androidリポジトリの履歴には、「NullPointerExceptionのクラッシュを修正」に
沿ったJava時代からの100を超えるコミットが含まれています。
Kotlinのnull安全機能は、より多くのNPEがユーザーに到達するのを防ぎ、
ふるいにかけるボイラープレートが非常に少ないため、コードレビュー中に他の問題に集中できるようにします。
[]
NPEによるアプリのクラッシュは、これをどうするか、という関連文献があるくらいには面倒なことが分かっている
Duolingoのアプリでも100以上のコミットがあるということがなお証明になる。
そもそもJavaだとコンパイル時に検出することができないエラーなので、Kotlinにする理由(null-safety機能のある言語にする理由)としては大きいと思う

３：開発者の幸せ(developer happiness)
Kotlinは、2018年にStack Overflowユーザーに最も愛された言語のひとつであり、Rustに次ぐものでした。
私たち自身の開発者は、iOSアプリでのSwiftのサポートと、TypeScriptでのduolingo.comの完全な書き直しという、
他の2つの主要なプラットフォームでの同様の言語アップグレードにすでに積極的に反応していました。
[]
他のプラットフォームでのアップグレードに積極的にやっていたからこそ踏み切ったことを考えると、消極的なところは踏み切りにくい。
１：生産性でも述べたように、Chaidarun氏のレポートでは選んだ言語との親和性が大きな理由となっている。
もっと気軽に移行できるためには、言語同士の親和性がある言語間での自動変換機能があると、
今度言語移行が容易になるのでは、と考えられる。
そうなればライブラリの別言語利用なんかもだいぶ楽になるのかも？

IntelliJの自動変換は今回の作業で重要な働きをしました
これがなければ、変換しようとは思わなかったかも知れません。
驚くほど安全で、問題が発生したのはリフレクションに関する極めてレアなケースだけでした。
最も共通的な問題は、Javaによる呼び出し側との互換性を確保するために、
変換後のコードに@JvmFieldと@JvmStaticというアノテーションを手作業で付けなければならなかったことです。
ただし、作業としては単純でした。
[]
単純作業に時間を割く、というのが一番生産性がないと思われる(これは個人の意見)
できることならここにかかる時間を極限まで少なくして別の作業に取り掛かれる方が良い
自動変換が重要な働きをした、と言っているように、自動変換機能があることによって移行を決定する、ということは大いにあり得る。
ということは、移行需要が高まっている中での自動変換機能の存在は、大きいと言える

GoogleがKotlinをAndroid開発の推奨言語にしたこと(2019年5月)から、
JetBrainsのこの言語は、その現代的な機能セットとも相まって、ますます多くの開発者の関心を集めるようになっている。
言語学習プラットフォームの開発で成功を収めたDuolingoは、
2018年に、生産性、安定性、開発者の幸福感の向上を目標として、Android開発をKotlinに移行する決定を下した。
[]
Duolingoが移行を決定したのは2018年、GoogleがKotlinをAndroid開発の推奨言語にしたのは2019年5月と、
Duolingoの移行決定の方が早い。推奨言語になる前に移行を決めた理由として、上記３つのことを期待したことを踏まえると
推奨言語になった後に同じようなことを期待してAndroid開発をKotlinに移行しようと考えるプロジェクト及び開発チームは
増えることが予想できる。


具体的には、変換するソースファイル毎に、開発者は少なくとも3つのプルリクエスト(PR)を発行する必要がある
IntelliJの自動変換の結果を収めたひとつめのPR
IDEのオートコンバーターを実行します。
このコミットはほとんどのLOCチャーンの原因であり、
コンパイル時エラーが発生する可能性はありますが、
ランタイムエラーに関しては一般的に安全であるため、慎重に確認する必要はありません。

自動変換で発生したコンパイルエラーを修正したふたつめのPR
コンパイルエラーを修正します。
修正は通常、実装が簡単です。たとえば@JvmStatic、必要に応じて注釈を追加します。

よりKotlinらしいコードに変更した3つめのPR。
リファクタリング。
作成者は、リンターを満たし、コードをリファクタリングして、
Kotlinでより慣用的にする必要があります。
たとえばsumBy、forループの代わりに使用します。

[]
一つ目(自動変換とそれによって発生するコンパイル時エラー)を解消し、二つ目の後のPRに持っていくのが本研究の目的
自動変換によるコンパイル時エラーを限りなくゼロに近くし、即座に３つ目(リファクタリング)&更なる改善・改良に時間を持っていける
そうすればより早くユーザに対し、安全かつ品質の高いサービスを提供できると考えられる
コンパイルエラーが含まれている状態では、更なる機能の追加・改善には踏み切りにくい
(修正後のコードと噛み合わなかったり、修正したことによりプログラム構造が変わる可能性がないとはいえない)
もちろんできる限り３つ目のよりKotlinらしいコードにすることも、可能な限り自動変換機能で行ってしまうことが望ましいが、
まずは1,2までの流れを自動変換機能で行ってしまうことを目標としたい


Chaidarun氏の説明では、Kotlinに変換することによってソース行数を平均30パーセント、最大では90パーセント、削減することができたという。
その結果、Duolingoアプリの安定性は大幅に向上し、NullPointerExceptionやIllegalArgumentExceptionのほとんどは、
Kotlinコンパイラのnullabilityアノテーションを適用していないサードパーティ製の依存関係からのものになった。
サードパーティのJava依存関係（Androidフレームワーク自体など）から
NullPointerExceptionsとIllegalArgumentExceptionsが発生することがありますが、
これはnull可能性アノテーションを使用するベストプラクティスに従わず、
Kotlinコンパイラーにメソッドのパラメーターまたは戻り値を知る方法がありません。
値はnullになる可能性があります。
この状況は、Googleが戻って、パブリックAPIに注釈を付けるにつれて、時間の経過とともに改善されてきました。
[]
サードパーティ製のライブラリによるnullの発生はどうしても避けにくい(Javaなので基本的にnullableである)
しかしながら、自分達で書いたコード内のnull記述を０に近づけていくことで、全体の発生率を下げることはできる
よって、プログラム内のnullをゼロに近づける、という方向性は間違ってないと言える
後半に『この状況は、Googleが戻って、パブリックAPIに注釈を付けるにつれて、時間の経過とともに改善されてきました。』
とあるので、ライブラリ側は公式の改善を待つべき(もしくは代替できるKotlinコードにライブラリを変換してしまう？)